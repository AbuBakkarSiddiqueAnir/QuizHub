"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.extractCounter = exports.addZeros = exports.InitCounter = void 0;
var mongoose = require("mongoose");
/**
 *
 */
var InitCounter;
(function (InitCounter) {
    InitCounter["YEARLY"] = "yearly";
    InitCounter["MONTHLY"] = "monthly";
    InitCounter["DAILY"] = "daily";
    InitCounter["HOURLY"] = "hourly";
})(InitCounter = exports.InitCounter || (exports.InitCounter = {}));
/**
 *
 * @param counter
 * @param size
 */
var addZeros = function (counter, size) {
    var counterString = counter.toString();
    while (counterString.length < size)
        counterString = "0" + counterString;
    return counterString;
};
exports.addZeros = addZeros;
/**
 *
 * @param options
 * @param serial
 */
var extractCounter = function (options, serial) {
    var separator = options.separator, initCounter = options.initCounter, _a = options.digits, digits = _a === void 0 ? 10 : _a;
    var counter;
    if (serial !== null) {
        counter = serial.split(separator).slice(-1).join(separator);
        var chunks = serial.split(separator);
        switch (initCounter) {
            case InitCounter.YEARLY:
                var currentYear = new Date().getFullYear().toString();
                var year = chunks[chunks.length - 2];
                if (currentYear !== year)
                    return exports.addZeros(1, digits);
                break;
            case InitCounter.MONTHLY:
                var currentMonth = exports.addZeros(new Date().getMonth() + 1, 2);
                var month = chunks[chunks.length - 2];
                if (currentMonth !== month)
                    return exports.addZeros(1, digits);
                break;
            case InitCounter.DAILY:
                var currentDay = exports.addZeros(new Date().getDate(), 2);
                var day = chunks[chunks.length - 2];
                if (currentDay !== day)
                    return exports.addZeros(1, digits);
                break;
        }
        return exports.addZeros(parseInt(counter) + 1, digits);
    }
    else
        return exports.addZeros(1, digits);
};
exports.extractCounter = extractCounter;
/**
 *
 * @param schema
 * @param options
 */
var plugin = function (schema, options) {
    var field = options.field, prefix = options.prefix, separator = options.separator, initCounter = options.initCounter;
    var counter;
    schema.pre("save", function (next) {
        return __awaiter(this, void 0, void 0, function () {
            var doc, lastDoc, error_1, serial, dating, t;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        doc = this;
                        // feild must a string
                        if (!(schema.path(field) instanceof mongoose.Schema.Types.String)) {
                            next(Error("Field must be type of string"));
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.constructor.findOne({}).sort((_a = {}, _a["" + field] = -1, _a))];
                    case 2:
                        lastDoc = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        throw error_1;
                    case 4:
                        serial = lastDoc ? lastDoc[field] : null;
                        counter = exports.extractCounter(options, serial);
                        switch (initCounter) {
                            case InitCounter.YEARLY:
                                dating = new Date().getFullYear().toString();
                                break;
                            case InitCounter.MONTHLY:
                                dating = [new Date().getFullYear().toString(), exports.addZeros(new Date().getMonth() + 1, 2)].join(separator);
                                break;
                            case InitCounter.DAILY:
                                dating = [new Date().getFullYear().toString(), exports.addZeros(new Date().getMonth() + 1, 2), exports.addZeros(new Date().getDate(), 2)].join(separator);
                                break;
                        }
                        t = [];
                        if (prefix)
                            t.push(prefix);
                        if (dating)
                            t.push(dating);
                        t.push(counter);
                        doc[field] = t.join(separator);
                        next();
                        return [2 /*return*/];
                }
            });
        });
    });
};
exports.plugin = plugin;
